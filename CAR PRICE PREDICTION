# Importing Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
# Load your raw dataset
df = pd.read_csv('car_data.csv')  # Ensure the CSV is in the same folder or provide the full path

# Show the first few rows
df.head()
# Basic info
print(df.info())
print(df.isnull().sum())

# Drop duplicates or nulls if needed
df = df.dropna().drop_duplicates()

# Optional: Convert categorical data to numeric
categorical_cols = ['Make', 'Model', 'Transmission', 'Fuel_Type']
le = LabelEncoder()

for col in categorical_cols:
    df[col] = le.fit_transform(df[col])

# Final columns
print(df.columns)
# Define input features and target
X = df.drop('Price', axis=1)
y = df['Price']

# Train-Test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

lr_preds = lr_model.predict(X_test)
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

rf_preds = rf_model.predict(X_test)
def evaluate_model(y_test, y_pred, model_name="Model"):
    print(f"--- {model_name} Evaluation ---")
    print("MAE :", mean_absolute_error(y_test, y_pred))
    print("MSE :", mean_squared_error(y_test, y_pred))
    print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))
    print("R2 Score:", r2_score(y_test, y_pred))
    print()

# Evaluate both models
evaluate_model(y_test, lr_preds, "Linear Regression")
evaluate_model(y_test, rf_preds, "Random Forest Regressor")
# Example: Predict a single car
sample = X_test.iloc[0].values.reshape(1, -1)

predicted_price = rf_model.predict(sample)
print(f"Predicted Car Price: â‚¹{predicted_price[0]:,.2f}")
feature_importance = rf_model.feature_importances_
features = X.columns

plt.figure(figsize=(10, 5))
sns.barplot(x=feature_importance, y=features)
plt.title("Feature Importance - Random Forest")
plt.xlabel("Importance")
plt.ylabel("Features")
plt.show()

